{"ast":null,"code":"import _slicedToArray from\"E:/snapbliss/projectinstaverse/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { Form, Input, Button, Card, Layout, Typography } from \"antd\";\n// import { UserOutlined, LockOutlined, MailOutlined } from \"@ant-design/icons\";\n// import { useDispatch } from 'react-redux';\n// import { login, signup } from '../../actions/authentication';\n// import styles from './styles';\n// const { Title } = Typography;\n// function AuthForm() {\n//     const user = null;\n//     const navigate = useNavigate();\n//     const dispatch = useDispatch();\n//     const [form] = Form.useForm();\n//     const [isLogin, setIsLogin] = useState(true);\n//     const onSubmit = (formValues) => {\n//         if (isLogin) {\n//             dispatch(login(formValues, navigate));\n//         } else {\n//             dispatch(signup(formValues, navigate));\n//         }\n//     };\n//     const switchMode = () => {\n//         setIsLogin(prevIsLogin => !prevIsLogin);\n//     };\n//     return (\n//         <Layout style={styles.container}>\n//             <Card\n//                 style={styles.card}\n//                 title={\n//                     <Title level={4} style={{ textAlign: \"center\" }}>\n//                         { isLogin ? \"Login to\" : \"Join\" } Instaverse\n//                     </Title>\n//                 }\n//             >\n//                 <Form\n//                     name=\"authform\"\n//                     form={form}\n//                     size=\"large\"\n//                     wrapperCol={{ span: 20, offset: 2 }}\n//                     onFinish={onSubmit}\n//                 >\n//                     {isLogin || (\n//                         <>\n//                             <Form.Item\n//                                 name=\"username\"\n//                                 rules={[\n//                                     {\n//                                         required: true,\n//                                         message: \"Please enter your username\"\n//                                     }\n//                                 ]}\n//                             >\n//                                 <Input prefix={<UserOutlined />} placeholder=\"username\" />\n//                             </Form.Item>\n//                         </>\n//                     )}\n//                     <Form.Item\n//                         name=\"email\"\n//                         rules={[\n//                             {\n//                                 required: true,\n//                                 message: \"Please enter valid email address\"\n//                             }\n//                         ]}\n//                     >\n//                         <Input type=\"email\" prefix={<MailOutlined />} placeholder=\"email address\" />\n//                     </Form.Item>\n//                     <Form.Item\n//                         name=\"password\"\n//                         rules={[\n//                             {\n//                                 required: true,\n//                                 message: \"Please enter your password\"\n//                             }\n//                         ]}\n//                     >\n//                         <Input.Password type=\"password\" prefix={<LockOutlined />} placeholder=\"password\" />\n//                     </Form.Item>\n//                     {isLogin || (\n//                         <Form.Item\n//                             name=\"confirmPassword\"\n//                             rules={[\n//                                 {\n//                                     required: true,\n//                                     message: \"Please repeat your password\"\n//                                 }\n//                             ]}\n//                         >\n//                             <Input.Password type=\"password\" prefix={<LockOutlined />} placeholder=\"Confirm Password\" />\n//                         </Form.Item>\n//                     )}\n//                     <Form.Item>\n//                         <Button htmlType='submit' typeof='primary'>\n//                             {isLogin ? \"Log In\" : \"Join\" }\n//                         </Button>\n//                         <span style={{ margin: \"0 10px 0px 20px\" }}>Or</span>\n//                         <Button type='link' onClick={switchMode}>\n//                             {isLogin ? \"Register now\" : \"have an account?\"}\n//                         </Button>\n//                     </Form.Item>\n//                 </Form>\n//             </Card>\n//         </Layout>\n//     )\n// }\n// export default AuthForm\nimport React,{useState}from'react';import{useNavigate}from'react-router-dom';import{useDispatch}from'react-redux';import{login,signup}from\"../../actions/authentication\";import{Form,Input,Button,Card,Layout,Typography}from\"antd\";import styles from'./styles';import{UserOutlined,LockOutlined,MailOutlined}from\"@ant-design/icons\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Title=Typography.Title;function AuthForm(){var user=null;var navigate=useNavigate();var dispatch=useDispatch();var _Form$useForm=Form.useForm(),_Form$useForm2=_slicedToArray(_Form$useForm,1),form=_Form$useForm2[0];var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isLogin=_useState2[0],setIsLogin=_useState2[1];var onSubmit=function onSubmit(formValues){if(isLogin){dispatch(login(formValues,navigate));}else{dispatch(signup(formValues,navigate));}};var switchMode=function switchMode(){setIsLogin(function(prevIsLogin){return!prevIsLogin;});};return/*#__PURE__*/_jsx(Layout,{style:styles.container,children:/*#__PURE__*/_jsx(Card,{style:styles.card,title:/*#__PURE__*/_jsxs(Title,{level:4,style:{textAlign:\"center\"},children:[isLogin?\"Login to\":\"Join\",\" Intaverse\"]}),children:/*#__PURE__*/_jsxs(Form,{name:\"authform\",form:form,size:\"large\",wrapperCol:{span:20,offset:2},onFinish:onSubmit,children:[isLogin||/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Form.Item,{name:\"username\",rules:[{required:true,message:\"Please Enter Your username\"}],children:/*#__PURE__*/_jsx(Input,{prefix:/*#__PURE__*/_jsx(UserOutlined,{}),placeholder:\"username\"})})}),/*#__PURE__*/_jsx(Form.Item,{name:\"email\",rules:[{required:true,message:\"Please Enter Your email address\"}],children:/*#__PURE__*/_jsx(Input,{type:\"email\",prefix:/*#__PURE__*/_jsx(MailOutlined,{}),placeholder:\"email address\"})}),/*#__PURE__*/_jsx(Form.Item,{name:\"password\",rules:[{required:true,message:\"Please Enter Your password\"}],children:/*#__PURE__*/_jsx(Input.Password,{type:\"password\",prefix:/*#__PURE__*/_jsx(LockOutlined,{}),placeholder:\"password\"})}),isLogin||/*#__PURE__*/_jsx(Form.Item,{name:\"confirmPassword\",rules:[{required:true,message:\"Please Repeat Your password\"}],children:/*#__PURE__*/_jsx(Input.Password,{type:\"password\",prefix:/*#__PURE__*/_jsx(LockOutlined,{}),placeholder:\"Confirm Password\"})}),/*#__PURE__*/_jsxs(Form.Item,{children:[/*#__PURE__*/_jsx(Button,{htmlType:\"Submit\",typeof:\"primary\",children:isLogin?\"Log In\":\"Join\"}),/*#__PURE__*/_jsx(\"span\",{style:{margin:\"0 10px 20px 0 px\"},children:\"Or\"}),/*#__PURE__*/_jsx(Button,{type:\"link\",onClick:switchMode,children:isLogin?\"Register Now \":\"Have an Account? \"})]})]})})});}export default AuthForm;","map":{"version":3,"names":["React","useState","useNavigate","useDispatch","login","signup","Form","Input","Button","Card","Layout","Typography","styles","UserOutlined","LockOutlined","MailOutlined","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","Title","AuthForm","user","navigate","dispatch","_Form$useForm","useForm","_Form$useForm2","_slicedToArray","form","_useState","_useState2","isLogin","setIsLogin","onSubmit","formValues","switchMode","prevIsLogin","style","container","children","card","title","level","textAlign","name","size","wrapperCol","span","offset","onFinish","Item","rules","required","message","prefix","placeholder","type","Password","htmlType","typeof","margin","onClick"],"sources":["E:/snapbliss/projectinstaverse/client/src/components/AuthForm/AuthForm.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { Form, Input, Button, Card, Layout, Typography } from \"antd\";\r\n// import { UserOutlined, LockOutlined, MailOutlined } from \"@ant-design/icons\";\r\n// import { useDispatch } from 'react-redux';\r\n// import { login, signup } from '../../actions/authentication';\r\n\r\n// import styles from './styles';\r\n\r\n// const { Title } = Typography;\r\n\r\n// function AuthForm() {\r\n//     const user = null;\r\n//     const navigate = useNavigate();\r\n//     const dispatch = useDispatch();\r\n\r\n//     const [form] = Form.useForm();\r\n//     const [isLogin, setIsLogin] = useState(true);\r\n\r\n//     const onSubmit = (formValues) => {\r\n//         if (isLogin) {\r\n//             dispatch(login(formValues, navigate));\r\n//         } else {\r\n//             dispatch(signup(formValues, navigate));\r\n//         }\r\n//     };\r\n\r\n//     const switchMode = () => {\r\n//         setIsLogin(prevIsLogin => !prevIsLogin);\r\n//     };\r\n\r\n//     return (\r\n//         <Layout style={styles.container}>\r\n//             <Card\r\n//                 style={styles.card}\r\n//                 title={\r\n//                     <Title level={4} style={{ textAlign: \"center\" }}>\r\n//                         { isLogin ? \"Login to\" : \"Join\" } Instaverse\r\n//                     </Title>\r\n//                 }\r\n//             >\r\n//                 <Form\r\n//                     name=\"authform\"\r\n//                     form={form}\r\n//                     size=\"large\"\r\n//                     wrapperCol={{ span: 20, offset: 2 }}\r\n//                     onFinish={onSubmit}\r\n//                 >\r\n//                     {isLogin || (\r\n//                         <>\r\n//                             <Form.Item\r\n//                                 name=\"username\"\r\n//                                 rules={[\r\n//                                     {\r\n//                                         required: true,\r\n//                                         message: \"Please enter your username\"\r\n//                                     }\r\n//                                 ]}\r\n//                             >\r\n//                                 <Input prefix={<UserOutlined />} placeholder=\"username\" />\r\n//                             </Form.Item>\r\n//                         </>\r\n//                     )}\r\n//                     <Form.Item\r\n//                         name=\"email\"\r\n//                         rules={[\r\n//                             {\r\n//                                 required: true,\r\n//                                 message: \"Please enter valid email address\"\r\n//                             }\r\n//                         ]}\r\n//                     >\r\n//                         <Input type=\"email\" prefix={<MailOutlined />} placeholder=\"email address\" />\r\n//                     </Form.Item>\r\n//                     <Form.Item\r\n//                         name=\"password\"\r\n//                         rules={[\r\n//                             {\r\n//                                 required: true,\r\n//                                 message: \"Please enter your password\"\r\n//                             }\r\n//                         ]}\r\n//                     >\r\n//                         <Input.Password type=\"password\" prefix={<LockOutlined />} placeholder=\"password\" />\r\n//                     </Form.Item>\r\n//                     {isLogin || (\r\n//                         <Form.Item\r\n//                             name=\"confirmPassword\"\r\n//                             rules={[\r\n//                                 {\r\n//                                     required: true,\r\n//                                     message: \"Please repeat your password\"\r\n//                                 }\r\n//                             ]}\r\n//                         >\r\n//                             <Input.Password type=\"password\" prefix={<LockOutlined />} placeholder=\"Confirm Password\" />\r\n//                         </Form.Item>\r\n//                     )}\r\n//                     <Form.Item>\r\n//                         <Button htmlType='submit' typeof='primary'>\r\n//                             {isLogin ? \"Log In\" : \"Join\" }\r\n//                         </Button>\r\n//                         <span style={{ margin: \"0 10px 0px 20px\" }}>Or</span>\r\n//                         <Button type='link' onClick={switchMode}>\r\n//                             {isLogin ? \"Register now\" : \"have an account?\"}\r\n//                         </Button>\r\n//                     </Form.Item>\r\n//                 </Form>\r\n//             </Card>\r\n//         </Layout>\r\n//     )\r\n// }\r\n\r\n// export default AuthForm\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport {login,signup} from \"../../actions/authentication\";\r\nimport {Form,Input,Button,Card,Layout,Typography} from \"antd\";\r\nimport styles from './styles';\r\nimport { UserOutlined, LockOutlined, MailOutlined } from \"@ant-design/icons\";\r\nconst {Title}=Typography;\r\nfunction AuthForm() {\r\n    const user=null;\r\n    const navigate=useNavigate();\r\n    const dispatch=useDispatch();\r\n    const [form]=Form.useForm();\r\n    const [isLogin,setIsLogin]=useState(true);\r\n    const onSubmit =(formValues)=>{\r\n        if(isLogin){\r\n            dispatch(login(formValues,navigate));\r\n        }else{\r\n            dispatch(signup(formValues,navigate));\r\n        }\r\n    };\r\n    const switchMode=()=>{\r\n        setIsLogin(prevIsLogin =>!prevIsLogin);\r\n    };\r\n  return (\r\n    <Layout style={styles.container}>\r\n        <Card \r\n        style={styles.card}\r\n        title={\r\n            <Title level={4} style={{textAlign:\"center\"}}>\r\n               {isLogin ?\"Login to\":\"Join\"} Intaverse\r\n            </Title>\r\n        }\r\n        >\r\n         <Form\r\n            name=\"authform\"\r\n            form={form}\r\n            size=\"large\"\r\n            wrapperCol={{span:20,offset:2}}\r\n            onFinish={onSubmit}\r\n         \r\n         >\r\n            {isLogin ||(\r\n                <>\r\n                <Form.Item\r\n                    name=\"username\"\r\n                    rules={[\r\n                        {\r\n                            required:true,\r\n                            message:\"Please Enter Your username\"\r\n                        }\r\n                    ]}\r\n                    >\r\n                        <Input prefix={<UserOutlined/>} placeholder=\"username\"/>\r\n                </Form.Item>\r\n                </>\r\n            )}\r\n            <Form.Item\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            required:true,\r\n                            message:\"Please Enter Your email address\"\r\n                        }\r\n                    ]}\r\n                    >\r\n                        <Input type=\"email\" prefix={<MailOutlined/>} placeholder=\"email address\"/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required:true,\r\n                            message:\"Please Enter Your password\"\r\n                        }\r\n                    ]}\r\n                    >\r\n                        <Input.Password type=\"password\" prefix={<LockOutlined/>} placeholder=\"password\"/>\r\n                </Form.Item>\r\n                {isLogin ||(\r\n                    <Form.Item\r\n                    name=\"confirmPassword\"\r\n                    rules={[\r\n                        {\r\n                            required:true,\r\n                            message:\"Please Repeat Your password\"\r\n                        }\r\n                    ]}\r\n                    >\r\n                        <Input.Password type=\"password\" prefix={<LockOutlined/>} placeholder=\"Confirm Password\"/>\r\n                </Form.Item>\r\n                )}\r\n                <Form.Item>\r\n                    <Button htmlType='Submit' typeof='primary'>\r\n                        {isLogin ?\"Log In\" :\"Join\"}\r\n                    </Button>\r\n                    <span style={{margin:\"0 10px 20px 0 px\"}}>Or</span>\r\n                    <Button type='link' onClick={switchMode}>\r\n                        {isLogin ?\"Register Now \": \"Have an Account? \"}\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>   \r\n        </Card>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default AuthForm"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}